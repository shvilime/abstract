/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */

plugins {
  id "com.linkedin.python-sdist" version "0.9.11"
  id "ivy-publish"
}

if (hasProperty("teamcity")) {
  version = teamcity["build.number"]
} else {
  version = project.__version__
}

python {
    pipConfig = ['global':['index-url': 'https://shvili.me/repository/pypi/simple/',
                           'trusted-host': 'shvili.me', 'timeout': '120']]

    docsDir = project.file('docs').path
    srcDir = project.file('src').path
    testDir = project.file('test').path

    details {
        virtualEnvPrompt = "(${project.name})"
        activateLink = project.file("activate")
        pinnedFile = project.file('requirements.txt')
        details.pythonVersion = '3.7'
    }
}

dependencies {
    setupRequires 'pypi:setuptools-scm:3.3.3'
    setupRequires 'pypi:pytest-runner:2.9'

    build 'pypi:sphinx-autodoc-typehints:1.6.0'
    build 'pypi:sphinxcontrib-plantuml:0.17'

    python 'pypi:requests:2.23.0'
    python 'pypi:urllib3:1.25.7'
    python 'pypi:dynaconf:3.1.4'
    python 'pypi:toml:0.10.2'
    python 'pypi:python-crontab:2.4.2'

    test 'pypi:fdb:2.0.1'
    test 'pypi:pytest-env:0.6.2'
}

repositories {
    ivy {
        url nexusPyPI
        layout 'pattern', {
            artifact '[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]'
            ivy '[organisation]/[module]/[revision]/[module]-[revision].ivy'
            m2compatible = true
        }
    }
}

tasks {
    flake8.enabled = true
    buildDocsHtml.enabled = true
    buildDocsJson.enabled = false
    pytest.enabled = true
}

publishing {
    publications {
        artifactDistribution(IvyPublication) {
             organisation = 'shvilime'

             tasks.generateDescriptorFileForArtifactDistributionPublication {
                 destination = file("${buildDir}/publications/${project.name}-${project.version}.xml")
             }
             // Зададим типы конфигураций в ivy файле
             configurations {
                 "default" {}
             }
             // Зададим параметры артефакта в ivy файле
             artifact("${buildDir}/distributions/${project.name}-${project.version}.tar.gz") {
                  type "tar.gz"
                  extension "tar.gz"
                  conf "default"
             }
             // Построим раздел зависимостей в ivy файле
             descriptor.withXml {
                 asNode().dependencies[0].@defaultconfmapping = "*-&gt;default"
             }
             project.configurations.python.files {
                 def dependency = new LinkedHashMap([org: it.group, name: it.name, rev: it.version, conf: 'default'])
                 descriptor.withXml {
                     asNode().dependencies*.appendNode('dependency', dependency)
                 }
             }
        }
    }
    repositories {
        ivy {
            credentials {
                username repoUser
                password repoPassword
            }
            url nexusDeployPyPI
            patternLayout {
                artifact "[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]"
                ivy "[organisation]/[module]/[revision]/[module]-[revision].ivy"
                m2compatible = true
            }
        }
     }
}
