.. Abstractclient documentation master file, created by
   sphinx-quickstart on Fri Jun 14 14:45:31 2019.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Документация по Abstract Client!
================================

Общая информация
----------------
**AbstractClient** - это фрейворк для написания клиентов по работе с потоками данных между ОО и ГК.
Фреймворк написан с использованием подхода DI (`dependency injection <https://ru.wikipedia.org/wiki/%D0%92%D0%BD%D0%B5%D0%B4%D1%80%D0%B5%D0%BD%D0%B8%D0%B5_%D0%B7%D0%B0%D0%B2%D0%B8%D1%81%D0%B8%D0%BC%D0%BE%D1%81%D1%82%D0%B8>`_),
что позволяет извне, на модульном уровне, изменять технологию работы с потоками, базами данных и логику их обработки.

Требования
----------

Для работы с фреймворком вам необходимо использовать python 3.7 или выше.

Возможности
-----------
Фреймворк, из коробки, включает в себя следующие возможности:
 #. Потокобезопасный пул подключений к базе данных
 #. Контроль запуска единственной копии фреймворка;
 #. Автосоздание рабочих директорий проекта (см. параметр "auto_create_directory" :ref:`clause-config_file`);
 #. Несколько версий среды исполнения (development, staging, production);
 #. Универсальный парсер конфигураций (JSON, INI, PlainText);
 #. Система логгирования (с настройкой конфигурации в JSON и поддержкой работы с ElasticAPM);
 #. Автоопределение типа обособленного подразделения;

Установка
---------
Фреймворк является стандартным пакетом python и размещен в локальном репозитории Nexus. Для установки используйте
стандартный метод установки пакетов, например, pip.

.. tip::
   pip install abstractclient

При этом, не забудьте прописать в вашем файле ~/.config/.pip/pip.conf параметры доступа к локальному PyPI репозиторию
компании.

.. code-block:: ini

   [global]
   index-url = http://shvili.me/root/pypi/+simple.
   # Здесь добавьте ссылку на корпоративный репозиторий, например ...
   extra-index-url = https://shvili.me/pypi-all/simple
   trusted-host = shvili.me
   timeout = 120

Структура фреймворка
--------------------
В общем виде, структуру фреймворка можно представить в виде следующей диаграммы:

.. uml:: pipeline.puml
   :align: center

В основе фреймворка находятся три класса.

:Repository:
   Класс для описания бизнес-логики работы потока данных. Должен быть реализован в обязательном порядке.

:Database:
   Класс для работы с базой данных (по умолчанию, фреймворк предоставляет универсальную реализацию класса
   DAO, (см. :ref:`clause-database`), для работы с базами данных по стандарту PEP 249 Python Database API Specification).

:Transport:
   Класс для реализации транспорта передачи данных (по умолчанию, фреймворк предоставляет реализацию класса
   HTTPFactory, (см. :ref:`clause-transport`) для передачи потока по протоколу HTTP).

Вспомогательным классом, который осуществляет настройку всех вышеперечисленных классов, а также инжектирование
транспортного класса и класса работы с базой в репозиторий - является DefaultConfig (см. :ref:`clause-config`).

Hello, world !
--------------
Пример использования фреймворка, для создания простого клиента потока данных из ГК в ОО можно посмотреть в разделе
:ref:`clause-example`

.. toctree::
   :hidden:
   :maxdepth: 2
   :caption: Contents:

   example
   config
   database
   transport
   repository


Контекстный Поиск
=================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


